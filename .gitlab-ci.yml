## Continuous Integration Jobs definition

stages:
  - test
  - build
  - release
  - publish

cache:
  key: "video-streaming-service"
  paths:
  - .composer-cache/

variables:
    CONTAINER_RELEASE_IMAGE_BASE: $CI_REGISTRY/images/video-streaming-service

## Executing Unit tests

unit_test:
  stage: test
  image: "docker.klink.asia/main/docker-php:7.0"
  script:
    - export COMPOSER_CACHE_DIR=`pwd`/.composer-cache
    - cp .env.example .env
    - composer install --prefer-dist
    - composer run install-video-cli
    - chmod +x ./bin/bin/packager-linux
    - php artisan key:generate
    - php artisan config:clear
    - vendor/bin/phpunit
  tags:
    - docker
  artifacts:
    expire_in: 1 week
    paths:
    - storage/logs/

## Packing only the production required dependencies

image_prepare:
  stage: build
  image: "docker.klink.asia/main/docker-php:7.0-alpine"
  script:
    - export COMPOSER_CACHE_DIR=`pwd`/.composer-cache
    - composer install --prefer-dist --no-dev
    - php artisan config:clear
  tags:
    - docker
  artifacts:
    expire_in: 1 week
    paths:
    - vendor/

## Building the Docker image

image_build:
  stage: release
  tags:
    - shell
    - deploy
  script:
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}

## Publishing the docker image on the final Docker registry

image_publish:
  stage: publish
  only:
    - tags
  tags:
    - dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD $CI_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} "$CONTAINER_RELEASE_IMAGE_BASE:${CI_BUILD_REF_NAME/v/}"
    - docker tag $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:${CI_BUILD_REF_NAME/v/}"